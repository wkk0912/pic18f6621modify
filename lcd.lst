

HI-TECH Software PICC-18 Macro Assembler V8.35PL3
Serial number: HCPIC18-88888                           Thu Jan  2 10:12:16 2014

Licensed to: ONE TWO
     1                           	processor	18F6622
     2                           	opt	pw 80
     3                           	psect	__Z88888RS_,global,delta=1
     4                           	psect	text,global,reloc=2,class=CODE,delta=1
     5                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     6                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     7                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     8  000000                     
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97                           
    98                           	psect	__Z88888RS_
    99  000004                     
   100  000004                     
   101                           
   102                           	psect	text
   103                           ;stdlib.h: 122: extern int atexit(void (*)(void)
      +                          );
   104                           ;stdlib.h: 126: extern void qsort(void *, size_t
      +                          , size_t, int (*)(const void *, const void *));
   105                           ;stdlib.h: 127: extern void * bsearch(const void
      +                           *, void *, size_t, size_t, int(*)(const void *,
      +                           const void *));
   106  008F62                     _lcd_pin_init:
   107                           ;	_arg_ptr assigned to ?a_xprintf+0
   108  000000                     _xprintf$arg_ptr	set	?a_xprintf
   109                           ;       param _fmt assigned to ?_xprintf+7
   110  000000                     _xprintf$fmt	set	?_xprintf+7
   111                           ;       param _flag assigned to ?_xprintf+6
   112  000000                     _xprintf$flag	set	?_xprintf+6
   113                           ;       param _y assigned to ?_xprintf+4
   114  000000                     _xprintf$y	set	?_xprintf+4
   115                           ;lcd.c: 325: int xprintf(int x, int y,unsigned c
      +                          har flag,const char *fmt, ...)
   116                           ;lcd.c: 326: {
   117                           ;       param _x assigned to ?_xprintf+2
   118  000000                     _xprintf$x	set	?_xprintf+2
   119                           ;	_i assigned to ?a_xprint+6
   120  000000                     _xprint$i	set	?a_xprint+6
   121                           ;	_t_y assigned to ?a_xprint+4
   122  000000                     _xprint$t_y	set	?a_xprint+4
   123                           ;	_t_x assigned to ?a_xprint+2
   124  000000                     _xprint$t_x	set	?a_xprint+2
   125                           ;	_len assigned to ?a_xprint+0
   126  000000                     _xprint$len	set	?a_xprint
   127                           ;       param _buf assigned to ?_xprint+5
   128  000000                     _xprint$buf	set	?_xprint+5
   129                           ;       param _flag assigned to ?_xprint+4
   130  000000                     _xprint$flag	set	?_xprint+4
   131                           ;       param _y assigned to ?_xprint+2
   132  000000                     _xprint$y	set	?_xprint+2
   133                           ;lcd.c: 278: int
   134                           ;lcd.c: 279: xprint(int x,int y,unsigned char fl
      +                          ag, const char *buf)
   135                           ;lcd.c: 280: {
   136                           ;       param _x assigned to ?_xprint+0
   137  000000                     _xprint$x	set	?_xprint
   138                           ;       param _flag assigned to ?_dis_signle_cha
      +                          r+5
   139  000000                     _dis_signle_char$flag	set	?_dis_signle_char+5
   140                           ;       param _acsii assigned to ?_dis_signle_ch
      +                          ar+4
   141  000000                     _dis_signle_char$acsii	set	?_dis_signle_char+4
   142                           ;       param _y assigned to ?_dis_signle_char+2
   143  000000                     _dis_signle_char$y	set	?_dis_signle_char+2
   144                           ;lcd.c: 240: void dis_signle_char(int x, int y, 
      +                          unsigned char acsii,unsigned char flag)
   145                           ;lcd.c: 241: {
   146                           ;       param _x assigned to ?_dis_signle_char+0
   147  000000                     _dis_signle_char$x	set	?_dis_signle_char
   148                           ;	_temp assigned to ?a_dis_double_word+0
   149  000000                     _dis_double_word$temp	set	?a_dis_double_word
   150                           ;       param _flag assigned to ?_dis_double_wor
      +                          d+6
   151  000000                     _dis_double_word$flag	set	?_dis_double_word+6
   152                           ;       param _code2 assigned to ?_dis_double_wo
      +                          rd+5
   153  000000                     _dis_double_word$code2	set	?_dis_double_word+5
   154                           ;       param _code1 assigned to ?_dis_double_wo
      +                          rd+4
   155  000000                     _dis_double_word$code1	set	?_dis_double_word+4
   156                           ;       param _y assigned to ?_dis_double_word+2
   157  000000                     _dis_double_word$y	set	?_dis_double_word+2
   158                           ;lcd.c: 189: void dis_double_word(int x,int y,un
      +                          signed char code1,unsigned char code2,unsigned c
      +                          har flag)
   159                           ;lcd.c: 190: {
   160                           ;       param _x assigned to ?_dis_double_word+0
   161  000000                     _dis_double_word$x	set	?_dis_double_word
   162                           ;	_i assigned to ?a_fill_bit_picture+2
   163  000000                     _fill_bit_picture$i	set	?a_fill_bit_picture+2
   164  000000                     
   165                           ;lcd.c: 20: TRISE = 0x00;
   166  008F62  6A96               	clrf	3990,c	;volatile
   167                           ;lcd.c: 21: TRISD1 = 0;
   168  008F64  9295               	bcf	3989,1,c	;volatile
   169                           ;lcd.c: 22: TRISD2 = 0;
   170  008F66  9495               	bcf	3989,2,c	;volatile
   171                           ;lcd.c: 23: TRISD3 = 0;
   172  008F68  9695               	bcf	3989,3,c	;volatile
   173                           ;lcd.c: 24: TRISD4 = 0;
   174  008F6A  9895               	bcf	3989,4,c	;volatile
   175                           ;lcd.c: 25: TRISD5 = 0;
   176  008F6C  9A95               	bcf	3989,5,c	;volatile
   177                           ;lcd.c: 26: TRISD6 = 0;
   178  008F6E  9C95               	bcf	3989,6,c	;volatile
   179                           ;lcd.c: 27: }
   180  008F70  0012               	return	
   181  008F72                     _dly:
   182  000000                     
   183                           ;lcd.c: 33: unsigned int i = 3;
   184  008F72  0E03               	movlw	3
   185  008F74  6EF3               	movwf	prodl,c
   186  008F76  6AF4               	clrf	prodh,c
   187                           ;lcd.c: 34: while(i--);
   188  008F78                     l8:
   189  008F78  50F3               	movf	prodl,w,c
   190  008F7A  6E00               	movwf	btemp
   191  008F7C  50F4               	movf	prodh,w,c
   192  008F7E  6E01               	movwf	btemp+1
   193  008F80  06F3               	decf	prodl,f,c
   194  008F82  0E00               	movlw	0
   195  008F84  5AF4               	subwfb	prodh,f,c
   196  008F86  5001               	movf	btemp+1,w
   197  008F88  1000               	iorwf	btemp,w
   198  008F8A  B4D8               	btfsc	status,2,c
   199  008F8C  0012               	return	
   200  008F8E  D7F4               	goto	l8
   201                           ;lcd.c: 35: }
   202                           ;lcd.c: 38: void lcd_col_config(unsigned char co
      +                          l)
   203                           ;lcd.c: 39: {
   204  008F90                     _lcd_col_config:
   205  000000                     
   206                           ; _col loaded to fsr1l
   207  008F90  6EE1               	movwf	fsr1l,c
   208                           ;lcd.c: 40: unsigned char d;
   209  008F92  50E1               	movf	fsr1l,w,c
   210  008F94  0940               	iorlw	64
   211  008F96  6ED9               	movwf	fsr2l,c
   212                           ;lcd.c: 44: RD3 = 0;
   213  008F98  9683               	bcf	3971,3,c	;volatile
   214                           ;lcd.c: 45: RD4 = 0;
   215  008F9A  9883               	bcf	3971,4,c	;volatile
   216                           ;lcd.c: 46: PORTE = d;
   217  008F9C  50D9               	movf	fsr2l,w,c
   218  008F9E  6E84               	movwf	3972,c	;volatile
   219                           ;lcd.c: 48: RD5 = 1;
   220  008FA0  8A83               	bsf	3971,5,c	;volatile
   221                           ;lcd.c: 49: dly();
   222  008FA2  DFE7               	call	_dly	;wreg free
   223                           ;lcd.c: 50: RD5 = 0;
   224  008FA4  9A83               	bcf	3971,5,c	;volatile
   225                           ;lcd.c: 54: }
   226  008FA6  0012               	return	
   227                           ;lcd.c: 56: void lcd_row_config(unsigned char ro
      +                          w)
   228                           ;lcd.c: 57: {
   229  008FA8                     _lcd_row_config:
   230  000000                     
   231                           ; _row loaded to fsr1l
   232  008FA8  6EE1               	movwf	fsr1l,c
   233                           ;lcd.c: 58: unsigned char d;
   234  008FAA  50E1               	movf	fsr1l,w,c
   235  008FAC  09C0               	iorlw	-64
   236  008FAE  6ED9               	movwf	fsr2l,c
   237                           ;lcd.c: 62: RD3 = 0;
   238  008FB0  9683               	bcf	3971,3,c	;volatile
   239                           ;lcd.c: 63: RD4 = 0;
   240  008FB2  9883               	bcf	3971,4,c	;volatile
   241                           ;lcd.c: 64: PORTE = d;
   242  008FB4  50D9               	movf	fsr2l,w,c
   243  008FB6  6E84               	movwf	3972,c	;volatile
   244                           ;lcd.c: 66: RD5 = 1;
   245  008FB8  8A83               	bsf	3971,5,c	;volatile
   246                           ;lcd.c: 67: dly();
   247  008FBA  DFDB               	call	_dly	;wreg free
   248                           ;lcd.c: 68: RD5 = 0;
   249  008FBC  9A83               	bcf	3971,5,c	;volatile
   250                           ;lcd.c: 70: }
   251  008FBE  0012               	return	
   252                           ;lcd.c: 73: void lcd_page_config(unsigned char p
      +                          age)
   253                           ;lcd.c: 74: {
   254  008FC0                     _lcd_page_config:
   255  000000                     
   256                           ; _page loaded to fsr1l
   257  008FC0  6EE1               	movwf	fsr1l,c
   258                           ;lcd.c: 75: unsigned char d;
   259  008FC2  50E1               	movf	fsr1l,w,c
   260  008FC4  09B8               	iorlw	-72
   261  008FC6  6ED9               	movwf	fsr2l,c
   262                           ;lcd.c: 79: RD3 = 0;
   263  008FC8  9683               	bcf	3971,3,c	;volatile
   264                           ;lcd.c: 80: RD4 = 0;
   265  008FCA  9883               	bcf	3971,4,c	;volatile
   266                           ;lcd.c: 81: PORTE = d;
   267  008FCC  50D9               	movf	fsr2l,w,c
   268  008FCE  6E84               	movwf	3972,c	;volatile
   269                           ;lcd.c: 83: RD5 = 1;
   270  008FD0  8A83               	bsf	3971,5,c	;volatile
   271                           ;lcd.c: 84: dly();
   272  008FD2  DFCF               	call	_dly	;wreg free
   273                           ;lcd.c: 85: RD5 = 0;
   274  008FD4  9A83               	bcf	3971,5,c	;volatile
   275                           ;lcd.c: 87: }
   276  008FD6  0012               	return	
   277                           ;lcd.c: 90: void write_data_to_lcd(unsigned char
      +                           data)
   278                           ;lcd.c: 91: {
   279  008FD8                     _write_data_to_lcd:
   280  000000                     
   281                           ;lcd.c: 93: RD3 = 1;
   282  008FD8  8683               	bsf	3971,3,c	;volatile
   283                           ;lcd.c: 94: RD4 = 0;
   284  008FDA  9883               	bcf	3971,4,c	;volatile
   285                           ;lcd.c: 96: PORTE = data;
   286  008FDC  6E84               	movwf	3972,c	;volatile
   287                           ;lcd.c: 98: RD5 = 1;
   288  008FDE  8A83               	bsf	3971,5,c	;volatile
   289                           ;lcd.c: 99: dly();
   290  008FE0  DFC8               	call	_dly	;wreg free
   291                           ;lcd.c: 100: RD5 = 0;
   292  008FE2  9A83               	bcf	3971,5,c	;volatile
   293                           ;lcd.c: 102: }
   294  008FE4  0012               	return	
   295                           ;lcd.c: 104: void write_cmd_to_lcd(unsigned char
      +                           cmd)
   296                           ;lcd.c: 105: {
   297  008FE6                     _write_cmd_to_lcd:
   298  000000                     
   299                           ;lcd.c: 107: RD3 = 0;
   300  008FE6  9683               	bcf	3971,3,c	;volatile
   301                           ;lcd.c: 108: RD4 = 0;
   302  008FE8  9883               	bcf	3971,4,c	;volatile
   303                           ;lcd.c: 109: PORTE = cmd;
   304  008FEA  6E84               	movwf	3972,c	;volatile
   305                           ;lcd.c: 111: RD5 = 1;
   306  008FEC  8A83               	bsf	3971,5,c	;volatile
   307                           ;lcd.c: 112: dly();
   308  008FEE  DFC1               	call	_dly	;wreg free
   309                           ;lcd.c: 113: RD5 = 0;
   310  008FF0  9A83               	bcf	3971,5,c	;volatile
   311                           ;lcd.c: 115: }
   312  008FF2  0012               	return	
   313                           ;lcd.c: 118: void fill_bit_picture(void)
   314                           ;lcd.c: 119: {
   315  008FF4                     _fill_bit_picture:
   316  000000                     
   317                           ;	_j assigned to ?a_fill_bit_picture+0
   318  000000                     _fill_bit_picture$j	set	?a_fill_bit_picture
   319                           ;lcd.c: 120: unsigned i,j;
   320  008FF4  0EF5               	movlw	low _fxdz
   321  008FF6  6E02               	movwf	btemp+2
   322  008FF8  0E21               	movlw	high _fxdz
   323  008FFA  6E03               	movwf	btemp+3
   324                           ;lcd.c: 123: static unsigned char k=0;
   325  008FFC  010E               	movlb	F1693 shr (0+8)
   326  008FFE  2B93               	incf	F1693& (0+255),f,b
   327                           ;lcd.c: 126: for(i=0;i<128;i++)
   328  009000  0100               	movlb	__Lparam shr (0+8)
   329  009002  6B2B               	clrf	(?a_fill_bit_picture+2)^(__Lparam& (0+6528
      +                          0))
   330  009004  6B2C               	clrf	(?a_fill_bit_picture+3)^(__Lparam& (0+6528
      +                          0))
   331  009006                     l17:
   332                           ;lcd.c: 127: {
   333                           ;lcd.c: 128: for(j=0;j<8;j++)
   334  009006  0100               	movlb	__Lparam shr (0+8)
   335  009008  6B29               	clrf	?a_fill_bit_picture^(__Lparam& (0+65280))
   336  00900A  6B2A               	clrf	(?a_fill_bit_picture+1)^(__Lparam& (0+6528
      +                          0))
   337                           ;lcd.c: 129: {
   338                           ;lcd.c: 130: lcd_col_config(i);
   339  00900C                     L3:
   340  00900C  512B               	movf	(?a_fill_bit_picture+2)^(__Lparam& (0+6528
      +                          0)),w
   341  00900E  DFC0               	call	_lcd_col_config
   342                           ;lcd.c: 131: lcd_page_config(j);
   343  009010  0100               	movlb	__Lparam shr (0+8)
   344  009012  5129               	movf	?a_fill_bit_picture^(__Lparam& (0+65280)),
      +                          w
   345  009014  DFD5               	call	_lcd_page_config
   346                           ;lcd.c: 132: if(i>63){RD1=1;RD2=0;}
   347  009016  0100               	movlb	__Lparam shr (0+8)
   348  009018  0E00               	movlw	0
   349  00901A  5D2C               	subwf	(?a_fill_bit_picture+3)^(__Lparam& (0+652
      +                          80)),w
   350  00901C  0E40               	movlw	64
   351  00901E  B4D8               	btfsc	status,2,c
   352  009020  5D2B               	subwf	(?a_fill_bit_picture+2)^(__Lparam& (0+652
      +                          80)),w
   353  009022  A0D8               	btfss	status,0,c
   354  009024  D003               	goto	l23
   355  009026  8283               	bsf	3971,1,c	;volatile
   356  009028  9483               	bcf	3971,2,c	;volatile
   357                           ;lcd.c: 133: else{RD1=0;RD2=1;}
   358  00902A  D002               	goto	l24
   359  00902C                     l23:
   360  00902C  9283               	bcf	3971,1,c	;volatile
   361  00902E  8483               	bsf	3971,2,c	;volatile
   362  009030                     l24:
   363                           ;lcd.c: 135: if(k&1)write_data_to_lcd(*p);
   364  009030  010E               	movlb	F1693 shr (0+8)
   365  009032  C002  FFF6         	movff	btemp+2,tblptrl
   366  009036  C003  FFF7         	movff	btemp+3,tblptrh
   367  00903A  0E0E               	movlw	(high __ramtop+-1)
   368  00903C  A193               	btfss	F1693& (0+255),0,b
   369  00903E  D00C               	goto	L2
   370  009040  64F7               	cpfsgt	tblptrh,c
   371  009042  D003               	bra	u47
   372  009044  0008               	tblrd		*
   373  009046  50F5               	movf	tablat,w,c
   374  009048  D005               	bra	u40
   375  00904A                     u47:
   376  00904A  CFF6 FFE9          	movff	tblptrl,fsr0l
   377  00904E  CFF7 FFEA          	movff	tblptrh,fsr0h
   378  009052  50EF               	movf	indf0,w,c
   379  009054                     u40:
   380  009054  DFC1               	call	_write_data_to_lcd
   381                           ;lcd.c: 136: else write_data_to_lcd(0xff-*p);
   382  009056  D00C               	goto	l26
   383  009058                     L2:
   384  009058  64F7               	cpfsgt	tblptrh,c
   385  00905A  D003               	bra	u57
   386  00905C  0008               	tblrd		*
   387  00905E  50F5               	movf	tablat,w,c
   388  009060  D005               	bra	u50
   389  009062                     u57:
   390  009062  CFF6 FFE9          	movff	tblptrl,fsr0l
   391  009066  CFF7 FFEA          	movff	tblptrh,fsr0h
   392  00906A  50EF               	movf	indf0,w,c
   393  00906C                     u50:
   394  00906C  08FF               	sublw	-1
   395  00906E  DFB4               	call	_write_data_to_lcd
   396  009070                     l26:
   397                           ;lcd.c: 137: p++;
   398  009070  4A02               	infsnz	btemp+2,f
   399  009072  2A03               	incf	btemp+3,f
   400                           ;lcd.c: 138: }
   401  009074  0100               	movlb	__Lparam shr (0+8)
   402  009076  4B29               	infsnz	?a_fill_bit_picture^(__Lparam& (0+65280)
      +                          ),f
   403  009078  2B2A               	incf	(?a_fill_bit_picture+1)^(__Lparam& (0+6528
      +                          0)),f
   404  00907A  0E00               	movlw	0
   405  00907C  5D2A               	subwf	(?a_fill_bit_picture+1)^(__Lparam& (0+652
      +                          80)),w
   406  00907E  0E08               	movlw	8
   407  009080  B4D8               	btfsc	status,2,c
   408  009082  5D29               	subwf	?a_fill_bit_picture^(__Lparam& (0+65280))
      +                          ,w
   409                           ;lcd.c: 139: }
   410  009084  A0D8               	btfss	status,0,c
   411  009086  D7C2               	goto	L3
   412  009088  4B2B               	infsnz	(?a_fill_bit_picture+2)^(__Lparam& (0+65
      +                          280)),f
   413  00908A  2B2C               	incf	(?a_fill_bit_picture+3)^(__Lparam& (0+6528
      +                          0)),f
   414  00908C  0E00               	movlw	0
   415  00908E  5D2C               	subwf	(?a_fill_bit_picture+3)^(__Lparam& (0+652
      +                          80)),w
   416  009090  0E80               	movlw	128
   417  009092  B4D8               	btfsc	status,2,c
   418  009094  5D2B               	subwf	(?a_fill_bit_picture+2)^(__Lparam& (0+652
      +                          80)),w
   419  009096  A0D8               	btfss	status,0,c
   420  009098  D7B6               	goto	l17
   421                           ;lcd.c: 141: for(i=0;i<1000;i++)for(j=0;j<1000;j
      +                          ++);
   422  00909A  6AF6               	clrf	tblptrl,c
   423  00909C  6AF7               	clrf	tblptrh,c
   424  00909E                     l27:
   425  00909E  6AF3               	clrf	prodl,c
   426  0090A0  6AF4               	clrf	prodh,c
   427  0090A2                     l30:
   428  0090A2  4AF3               	infsnz	prodl,f,c
   429  0090A4  2AF4               	incf	prodh,f,c
   430  0090A6  0E03               	movlw	3
   431  0090A8  5CF4               	subwf	prodh,w,c
   432  0090AA  0EE8               	movlw	232
   433  0090AC  B4D8               	btfsc	status,2,c
   434  0090AE  5CF3               	subwf	prodl,w,c
   435  0090B0  A0D8               	btfss	status,0,c
   436  0090B2  D7F7               	goto	l30
   437  0090B4  4AF6               	infsnz	tblptrl,f,c
   438  0090B6  2AF7               	incf	tblptrh,f,c
   439  0090B8  0E03               	movlw	3
   440  0090BA  5CF7               	subwf	tblptrh,w,c
   441  0090BC  0EE8               	movlw	232
   442  0090BE  B4D8               	btfsc	status,2,c
   443  0090C0  5CF6               	subwf	tblptrl,w,c
   444  0090C2  B0D8               	btfsc	status,0,c
   445  0090C4  0012               	return	
   446  0090C6  D7EB               	goto	l27
   447                           ;lcd.c: 143: }
   448                           ;lcd.c: 144: void lcd_clear(void)
   449                           ;lcd.c: 145: {
   450  0090C8                     _lcd_clear:
   451  000000                     
   452                           ;lcd.c: 146: unsigned char i,j;
   453  0090C8  9283               	bcf	3971,1,c	;volatile
   454  0090CA  9483               	bcf	3971,2,c	;volatile
   455                           ;lcd.c: 150: for(i=0;i<8;i++)
   456  0090CC  6AE9               	clrf	fsr0l,c
   457  0090CE                     l34:
   458                           ;lcd.c: 151: {
   459                           ;lcd.c: 152: lcd_page_config(i);
   460  0090CE  50E9               	movf	fsr0l,w,c
   461  0090D0  DF77               	call	_lcd_page_config
   462                           ;lcd.c: 153: lcd_col_config(0);
   463  0090D2  0E00               	movlw	0
   464  0090D4  DF5D               	call	_lcd_col_config
   465                           ;lcd.c: 154: for(j=0;j<64;j++)
   466  0090D6  6AD9               	clrf	fsr2l,c
   467  0090D8                     l37:
   468                           ;lcd.c: 155: {
   469                           ;lcd.c: 156: write_data_to_lcd(0);
   470  0090D8  0E00               	movlw	0
   471  0090DA  DF7E               	call	_write_data_to_lcd
   472                           ;lcd.c: 157: }
   473  0090DC  2AD9               	incf	fsr2l,f,c
   474  0090DE  0E3F               	movlw	63
   475  0090E0  64D9               	cpfsgt	fsr2l,c
   476  0090E2  D7FA               	goto	l37
   477                           ;lcd.c: 158: }
   478  0090E4  2AE9               	incf	fsr0l,f,c
   479  0090E6  0E07               	movlw	7
   480  0090E8  64E9               	cpfsgt	fsr0l,c
   481  0090EA  D7F1               	goto	l34
   482  0090EC  0012               	return	
   483                           ;lcd.c: 159: }
   484                           ;lcd.c: 166: void init_lcd(void)
   485                           ;lcd.c: 167: {
   486  0090EE                     _init_lcd:
   487  000000                     
   488                           ;lcd.c: 169: RD1 = 0;
   489  0090EE  9283               	bcf	3971,1,c	;volatile
   490                           ;lcd.c: 170: RD2 = 0;
   491  0090F0  9483               	bcf	3971,2,c	;volatile
   492                           ;lcd.c: 171: dly();
   493  0090F2  DF3F               	call	_dly	;wreg free
   494                           ;lcd.c: 172: dly();
   495  0090F4  DF3E               	call	_dly	;wreg free
   496                           ;lcd.c: 173: write_cmd_to_lcd(0x3e);
   497  0090F6  0E3E               	movlw	62
   498  0090F8  DF76               	call	_write_cmd_to_lcd
   499                           ;lcd.c: 174: write_cmd_to_lcd(0x3f);
   500  0090FA  0E3F               	movlw	63
   501  0090FC  DF74               	call	_write_cmd_to_lcd
   502                           ;lcd.c: 175: lcd_row_config(0);
   503  0090FE  0E00               	movlw	0
   504  009100  DF53               	call	_lcd_row_config
   505                           ;lcd.c: 176: lcd_clear();
   506  009102  D7E2               	goto	_lcd_clear	;wreg free
   507                           ;lcd.c: 177: }
   508  009104  0044               	dw	?_dis_double_word
   509  009106                     _dis_double_word:
   510  000000                     
   511                           ;lcd.c: 191: unsigned char i,pos,temp;
   512  009106  6AE9               	clrf	fsr0l,c
   513  009108                     l42:
   514                           ;lcd.c: 195: {
   515                           ;lcd.c: 196: if((code1 == ziku[i][0])&&(code2== 
      +                          ziku[i][1]))
   516  009108  50E9               	movf	fsr0l,w,c
   517  00910A  0D22               	mullw	34
   518  00910C  50F3               	movf	prodl,w,c
   519  00910E  0FFD               	addlw	low _ziku
   520  009110  6EF6               	movwf	tblptrl,c
   521  009112  50F4               	movf	prodh,w,c
   522  009114  6EF7               	movwf	tblptrh,c
   523  009116  0E19               	movlw	high _ziku
   524  009118  22F7               	addwfc	tblptrh,f,c
   525  00911A  0008               	tblrd		*
   526  00911C  50F5               	movf	tablat,w,c
   527  00911E  0100               	movlb	__Lparam shr (0+8)
   528  009120  1948               	xorwf	(?_dis_double_word+4)^(__Lparam& (0+65280
      +                          )),w
   529  009122  A4D8               	btfss	status,2,c
   530  009124  D019               	goto	l45
   531  009126  50E9               	movf	fsr0l,w,c
   532  009128  0D22               	mullw	34
   533  00912A  50F3               	movf	prodl,w,c
   534  00912C  0FFD               	addlw	low _ziku
   535  00912E  6EF6               	movwf	tblptrl,c
   536  009130  50F4               	movf	prodh,w,c
   537  009132  6EF7               	movwf	tblptrh,c
   538  009134  0E19               	movlw	high _ziku
   539  009136  22F7               	addwfc	tblptrh,f,c
   540  009138  2AF6               	incf	tblptrl,f,c
   541  00913A  0E00               	movlw	0
   542  00913C  22F7               	addwfc	tblptrh,f,c
   543  00913E  0008               	tblrd		*
   544  009140  50F5               	movf	tablat,w,c
   545  009142  1949               	xorwf	(?_dis_double_word+5)^(__Lparam& (0+65280
      +                          )),w
   546  009144  A4D8               	btfss	status,2,c
   547  009146  D008               	goto	l45
   548                           ;lcd.c: 197: {
   549  009148  CFE9 F000          	movff	fsr0l,btemp
   550  00914C  6A01               	clrf	btemp+1
   551  00914E  C000  FFF3         	movff	btemp,prodl
   552  009152  C001  FFF4         	movff	btemp+1,prodh
   553                           ;lcd.c: 199: break;
   554  009156  D004               	goto	l43
   555  009158                     l45:
   556                           ;lcd.c: 200: }
   557  009158  2AE9               	incf	fsr0l,f,c
   558  00915A  0E3B               	movlw	59
   559  00915C  64E9               	cpfsgt	fsr0l,c
   560  00915E  D7D4               	goto	l42
   561  009160                     l43:
   562                           ;lcd.c: 202: if(i == 60)return;
   563  009160  50E9               	movf	fsr0l,w,c
   564  009162  0A3C               	xorlw	60
   565  009164  B4D8               	btfsc	status,2,c
   566  009166  0012               	return	
   567                           ;lcd.c: 204: for(pos = 0;pos<32;pos++)
   568  009168  6A03               	clrf	btemp+3
   569  00916A                     l47:
   570                           ;lcd.c: 205: {
   571                           ;lcd.c: 206: temp = ziku[i][2+pos];
   572  00916A  50E9               	movf	fsr0l,w,c
   573  00916C  0D22               	mullw	34
   574  00916E  5003               	movf	btemp+3,w
   575  009170  26F3               	addwf	prodl,f,c
   576  009172  0E00               	movlw	0
   577  009174  22F4               	addwfc	prodh,f,c
   578  009176  50F3               	movf	prodl,w,c
   579  009178  0FFD               	addlw	low _ziku
   580  00917A  6EF6               	movwf	tblptrl,c
   581  00917C  50F4               	movf	prodh,w,c
   582  00917E  6EF7               	movwf	tblptrh,c
   583  009180  0E19               	movlw	high _ziku
   584  009182  22F7               	addwfc	tblptrh,f,c
   585  009184  0E02               	movlw	2
   586  009186  26F6               	addwf	tblptrl,f,c
   587  009188  0E00               	movlw	0
   588  00918A  22F7               	addwfc	tblptrh,f,c
   589  00918C  0008               	tblrd		*
   590  00918E  50F5               	movf	tablat,w,c
   591  009190  0100               	movlb	__Lparam shr (0+8)
   592  009192  6F4B               	movwf	?a_dis_double_word^(__Lparam& (0+65280))
   593                           ;lcd.c: 207: if((y+(pos>>1))>=64)
   594  009194  90D8               	bcf	status,0,c
   595  009196  3003               	rrcf	btemp+3,w
   596  009198  2546               	addwf	(?_dis_double_word+2)^(__Lparam& (0+65280
      +                          )),w
   597  00919A  6E00               	movwf	btemp
   598  00919C  0E00               	movlw	0
   599  00919E  2147               	addwfc	(?_dis_double_word+3)^(__Lparam& (0+6528
      +                          0)),w
   600  0091A0  6E01               	movwf	btemp+1
   601  0091A2  5001               	movf	btemp+1,w
   602  0091A4  0A80               	xorlw	128
   603  0091A6  0F80               	addlw	-128
   604  0091A8  0E40               	movlw	64
   605  0091AA  B4D8               	btfsc	status,2,c
   606  0091AC  5C00               	subwf	btemp,w
   607  0091AE  A0D8               	btfss	status,0,c
   608  0091B0  D008               	goto	l50
   609                           ;lcd.c: 208: {
   610  0091B2  8283               	bsf	3971,1,c	;volatile
   611                           ;lcd.c: 210: RD2 = 0;
   612  0091B4  9483               	bcf	3971,2,c	;volatile
   613                           ;lcd.c: 212: lcd_col_config(y-64+(pos>>1));
   614  0091B6  90D8               	bcf	status,0,c
   615  0091B8  3003               	rrcf	btemp+3,w
   616  0091BA  2546               	addwf	(?_dis_double_word+2)^(__Lparam& (0+65280
      +                          )),w
   617  0091BC  0FC0               	addlw	-64
   618  0091BE  DEE8               	call	_lcd_col_config
   619                           ;lcd.c: 213: }
   620  0091C0  D00E               	goto	l51
   621  0091C2                     l50:
   622                           ;lcd.c: 215: {
   623  0091C2  9283               	bcf	3971,1,c	;volatile
   624                           ;lcd.c: 217: RD2 = 1;
   625  0091C4  8483               	bsf	3971,2,c	;volatile
   626                           ;lcd.c: 218: lcd_col_config(y+(pos>>1));
   627  0091C6  C003  F000         	movff	btemp+3,btemp
   628  0091CA  0E01               	movlw	1
   629  0091CC  6E01               	movwf	btemp+1
   630  0091CE                     u185:
   631  0091CE  90D8               	bcf	status,0,c
   632  0091D0  3200               	rrcf	btemp,f
   633  0091D2  2E01               	decfsz	btemp+1,f
   634  0091D4  D7FC               	goto	u185
   635  0091D6  0100               	movlb	__Lparam shr (0+8)
   636  0091D8  5146               	movf	(?_dis_double_word+2)^(__Lparam& (0+65280)
      +                          ),w
   637  0091DA  2400               	addwf	btemp,w
   638  0091DC  DED9               	call	_lcd_col_config
   639  0091DE                     l51:
   640                           ;lcd.c: 219: }
   641                           ;lcd.c: 220: lcd_page_config(x+(pos&0x01));
   642  0091DE  C003  F000         	movff	btemp+3,btemp
   643  0091E2  0E01               	movlw	1
   644  0091E4  1600               	andwf	btemp,f
   645  0091E6  0100               	movlb	__Lparam shr (0+8)
   646  0091E8  5144               	movf	?_dis_double_word^(__Lparam& (0+65280)),w
   647  0091EA  2400               	addwf	btemp,w
   648  0091EC  DEE9               	call	_lcd_page_config
   649                           ;lcd.c: 221: if(flag == 0)
   650  0091EE  0100               	movlb	__Lparam shr (0+8)
   651  0091F0  514A               	movf	(?_dis_double_word+6)^(__Lparam& (0+65280)
      +                          ),w
   652  0091F2  A4D8               	btfss	status,2,c
   653  0091F4  D003               	goto	l52
   654                           ;lcd.c: 222: {
   655  0091F6  514B               	movf	?a_dis_double_word^(__Lparam& (0+65280)),w
   656  0091F8  DEEF               	call	_write_data_to_lcd
   657                           ;lcd.c: 224: }
   658  0091FA  D004               	goto	l53
   659  0091FC                     l52:
   660                           ;lcd.c: 226: {
   661  0091FC  0100               	movlb	__Lparam shr (0+8)
   662  0091FE  514B               	movf	?a_dis_double_word^(__Lparam& (0+65280)),w
   663  009200  08FF               	sublw	-1
   664  009202  DEEA               	call	_write_data_to_lcd
   665  009204                     l53:
   666                           ;lcd.c: 229: }
   667                           ;lcd.c: 232: }
   668  009204  2A03               	incf	btemp+3,f
   669  009206  0E1F               	movlw	31
   670  009208  6403               	cpfsgt	btemp+3
   671  00920A  D7AF               	goto	l47
   672  00920C  0012               	return	
   673                           ;lcd.c: 235: }
   674  00920E  0044               	dw	?_dis_signle_char
   675  009210                     _dis_signle_char:
   676  000000                     
   677                           ;lcd.c: 243: unsigned char temp,pos;
   678  009210  6AE9               	clrf	fsr0l,c
   679  009212                     l55:
   680                           ;lcd.c: 245: {
   681                           ;lcd.c: 246: temp=ascii_8_16[((acsii-0x20)*16)+p
      +                          os];
   682  009212  C048  F000         	movff	?_dis_signle_char+4,btemp
   683  009216  6A01               	clrf	btemp+1
   684  009218  3A00               	swapf	btemp,f
   685  00921A  3A01               	swapf	btemp+1,f
   686  00921C  0EF0               	movlw	240
   687  00921E  1601               	andwf	btemp+1,f
   688  009220  5000               	movf	btemp,w
   689  009222  0B0F               	andlw	15
   690  009224  1201               	iorwf	btemp+1,f
   691  009226  0EF0               	movlw	240
   692  009228  1600               	andwf	btemp,f
   693  00922A  50E9               	movf	fsr0l,w,c
   694  00922C  2600               	addwf	btemp,f
   695  00922E  0E00               	movlw	0
   696  009230  2201               	addwfc	btemp+1,f
   697  009232  5000               	movf	btemp,w
   698  009234  0F0D               	addlw	low _ascii_8_16
   699  009236  6EF6               	movwf	tblptrl,c
   700  009238  5001               	movf	btemp+1,w
   701  00923A  6EF7               	movwf	tblptrh,c
   702  00923C  0E14               	movlw	high _ascii_8_16
   703  00923E  22F7               	addwfc	tblptrh,f,c
   704  009240  90D8               	bcf	status,0
   705  009242  0EFE               	movlw	254
   706  009244  26F7               	addwf	tblptrh,f,c
   707  009246  0008               	tblrd		*
   708  009248  50F5               	movf	tablat,w,c
   709  00924A  6E03               	movwf	btemp+3
   710                           ;lcd.c: 248: if((y+(pos>>1))>=64)
   711  00924C  90D8               	bcf	status,0,c
   712  00924E  30E9               	rrcf	fsr0l,w,c
   713  009250  0100               	movlb	__Lparam shr (0+8)
   714  009252  2546               	addwf	(?_dis_signle_char+2)^(__Lparam& (0+65280
      +                          )),w
   715  009254  6E00               	movwf	btemp
   716  009256  0E00               	movlw	0
   717  009258  2147               	addwfc	(?_dis_signle_char+3)^(__Lparam& (0+6528
      +                          0)),w
   718  00925A  6E01               	movwf	btemp+1
   719  00925C  5001               	movf	btemp+1,w
   720  00925E  0A80               	xorlw	128
   721  009260  0F80               	addlw	-128
   722  009262  0E40               	movlw	64
   723  009264  B4D8               	btfsc	status,2,c
   724  009266  5C00               	subwf	btemp,w
   725  009268  A0D8               	btfss	status,0,c
   726  00926A  D008               	goto	l58
   727                           ;lcd.c: 249: {
   728  00926C  8283               	bsf	3971,1,c	;volatile
   729                           ;lcd.c: 251: RD2 = 0;
   730  00926E  9483               	bcf	3971,2,c	;volatile
   731                           ;lcd.c: 252: lcd_col_config(y-64+(pos>>1));
   732  009270  90D8               	bcf	status,0,c
   733  009272  30E9               	rrcf	fsr0l,w,c
   734  009274  2546               	addwf	(?_dis_signle_char+2)^(__Lparam& (0+65280
      +                          )),w
   735  009276  0FC0               	addlw	-64
   736  009278  DE8B               	call	_lcd_col_config
   737                           ;lcd.c: 253: }
   738  00927A  D00E               	goto	l59
   739  00927C                     l58:
   740                           ;lcd.c: 255: {
   741  00927C  9283               	bcf	3971,1,c	;volatile
   742                           ;lcd.c: 257: RD2 = 1;
   743  00927E  8483               	bsf	3971,2,c	;volatile
   744                           ;lcd.c: 258: lcd_col_config(y+(pos>>1));
   745  009280  CFE9 F000          	movff	fsr0l,btemp
   746  009284  0E01               	movlw	1
   747  009286  6E01               	movwf	btemp+1
   748  009288                     u225:
   749  009288  90D8               	bcf	status,0,c
   750  00928A  3200               	rrcf	btemp,f
   751  00928C  2E01               	decfsz	btemp+1,f
   752  00928E  D7FC               	goto	u225
   753  009290  0100               	movlb	__Lparam shr (0+8)
   754  009292  5146               	movf	(?_dis_signle_char+2)^(__Lparam& (0+65280)
      +                          ),w
   755  009294  2400               	addwf	btemp,w
   756  009296  DE7C               	call	_lcd_col_config
   757  009298                     l59:
   758                           ;lcd.c: 259: }
   759                           ;lcd.c: 260: lcd_page_config(x+(pos&0x01));
   760  009298  CFE9 F000          	movff	fsr0l,btemp
   761  00929C  0E01               	movlw	1
   762  00929E  1600               	andwf	btemp,f
   763  0092A0  0100               	movlb	__Lparam shr (0+8)
   764  0092A2  5144               	movf	?_dis_signle_char^(__Lparam& (0+65280)),w
   765  0092A4  2400               	addwf	btemp,w
   766  0092A6  DE8C               	call	_lcd_page_config
   767                           ;lcd.c: 262: if(flag == 0)
   768  0092A8  0100               	movlb	__Lparam shr (0+8)
   769  0092AA  5149               	movf	(?_dis_signle_char+5)^(__Lparam& (0+65280)
      +                          ),w
   770  0092AC  A4D8               	btfss	status,2,c
   771  0092AE  D003               	goto	l60
   772                           ;lcd.c: 263: {
   773  0092B0  5003               	movf	btemp+3,w
   774  0092B2  DE92               	call	_write_data_to_lcd
   775                           ;lcd.c: 265: }
   776  0092B4  D003               	goto	l61
   777  0092B6                     l60:
   778                           ;lcd.c: 267: {
   779  0092B6  5003               	movf	btemp+3,w
   780  0092B8  08FF               	sublw	-1
   781  0092BA  DE8E               	call	_write_data_to_lcd
   782  0092BC                     l61:
   783                           ;lcd.c: 270: }
   784                           ;lcd.c: 272: }
   785  0092BC  2AE9               	incf	fsr0l,f,c
   786  0092BE  0E0F               	movlw	15
   787  0092C0  64E9               	cpfsgt	fsr0l,c
   788  0092C2  D7A7               	goto	l55
   789  0092C4  0012               	return	
   790                           ;lcd.c: 273: }
   791  0092C6  0035               	dw	?_xprint
   792  0092C8                     _xprint:
   793  000000                     
   794                           ;lcd.c: 281: int len;
   795  0092C8  C035  F03E         	movff	?_xprint,?a_xprint+2
   796  0092CC  C036  F03F         	movff	?_xprint+1,?a_xprint+3
   797                           ;lcd.c: 283: int t_y=y;
   798  0092D0  C037  F040         	movff	?_xprint+2,?a_xprint+4
   799  0092D4  C038  F041         	movff	?_xprint+3,?a_xprint+5
   800                           ;lcd.c: 284: int i;
   801  0092D8  C03A  F044         	movff	?_xprint+5,?_strlen
   802  0092DC  C03B  F045         	movff	?_xprint+6,?_strlen+1
   803  0092E0  EC54  F051         	call	_strlen	;wreg free
   804  0092E4  C000  F03C         	movff	btemp,?a_xprint
   805  0092E8  C001  F03D         	movff	btemp+1,?a_xprint+1
   806                           ;lcd.c: 293: for (i = 0; i < len; )
   807  0092EC  0100               	movlb	__Lparam shr (0+8)
   808  0092EE  6B42               	clrf	(?a_xprint+6)^(__Lparam& (0+65280))
   809  0092F0  6B43               	clrf	(?a_xprint+7)^(__Lparam& (0+65280))
   810                           ;lcd.c: 313: continue;
   811  0092F2                     l66:
   812  0092F2  0100               	movlb	__Lparam shr (0+8)
   813  0092F4  5143               	movf	(?a_xprint+7)^(__Lparam& (0+65280)),w
   814  0092F6  0A80               	xorlw	128
   815  0092F8  6E00               	movwf	btemp
   816  0092FA  513D               	movf	(?a_xprint+1)^(__Lparam& (0+65280)),w
   817  0092FC  0A80               	xorlw	128
   818  0092FE  5C00               	subwf	btemp,w
   819  009300  E102               	bnz	u355
   820  009302  513C               	movf	?a_xprint^(__Lparam& (0+65280)),w
   821  009304  5D42               	subwf	(?a_xprint+6)^(__Lparam& (0+65280)),w
   822  009306                     u355:
   823  009306  B0D8               	btfsc	status,0,c
   824  009308  D0CC               	goto	u350
   825                           ;lcd.c: 294: {
   826                           ;lcd.c: 295: if (buf[i] >= ' ' && buf[i] < 0x7f)
   827  00930A  C03A  F000         	movff	?_xprint+5,btemp
   828  00930E  C03B  F001         	movff	?_xprint+6,btemp+1
   829  009312  0100               	movlb	__Lparam shr (0+8)
   830  009314  5142               	movf	(?a_xprint+6)^(__Lparam& (0+65280)),w
   831  009316  2600               	addwf	btemp,f
   832  009318  5143               	movf	(?a_xprint+7)^(__Lparam& (0+65280)),w
   833  00931A  2201               	addwfc	btemp+1,f
   834  00931C  C000  FFF6         	movff	btemp,tblptrl
   835  009320  C001  FFF7         	movff	btemp+1,tblptrh
   836  009324  0E0E               	movlw	(high __ramtop+-1)
   837  009326  64F7               	cpfsgt	tblptrh,c
   838  009328  D003               	bra	u257
   839  00932A  0008               	tblrd		*
   840  00932C  50F5               	movf	tablat,w,c
   841  00932E  D005               	bra	u250
   842  009330                     u257:
   843  009330  CFF6 FFE9          	movff	tblptrl,fsr0l
   844  009334  CFF7 FFEA          	movff	tblptrh,fsr0h
   845  009338  50EF               	movf	indf0,w,c
   846  00933A                     u250:
   847  00933A  6E00               	movwf	btemp
   848  00933C  0E20               	movlw	32
   849  00933E  5C00               	subwf	btemp,w
   850  009340  C03A  F000         	movff	?_xprint+5,btemp
   851  009344  A0D8               	btfss	status,0,c
   852  009346  D045               	goto	L4
   853  009348  C03B  F001         	movff	?_xprint+6,btemp+1
   854  00934C  5142               	movf	(?a_xprint+6)^(__Lparam& (0+65280)),w
   855  00934E  2600               	addwf	btemp,f
   856  009350  5143               	movf	(?a_xprint+7)^(__Lparam& (0+65280)),w
   857  009352  2201               	addwfc	btemp+1,f
   858  009354  C000  FFF6         	movff	btemp,tblptrl
   859  009358  C001  FFF7         	movff	btemp+1,tblptrh
   860  00935C  0E0E               	movlw	(high __ramtop+-1)
   861  00935E  64F7               	cpfsgt	tblptrh,c
   862  009360  D003               	bra	u277
   863  009362  0008               	tblrd		*
   864  009364  50F5               	movf	tablat,w,c
   865  009366  D005               	bra	u270
   866  009368                     u277:
   867  009368  CFF6 FFE9          	movff	tblptrl,fsr0l
   868  00936C  CFF7 FFEA          	movff	tblptrh,fsr0h
   869  009370  50EF               	movf	indf0,w,c
   870  009372                     u270:
   871  009372  6E00               	movwf	btemp
   872  009374  0E7F               	movlw	127
   873  009376  5C00               	subwf	btemp,w
   874  009378  B0D8               	btfsc	status,0,c
   875  00937A  D029               	goto	l67
   876                           ;lcd.c: 296: {
   877  00937C  C03E  F044         	movff	?a_xprint+2,?_dis_signle_char
   878  009380  C03F  F045         	movff	?a_xprint+3,?_dis_signle_char+1
   879  009384  C040  F046         	movff	?a_xprint+4,?_dis_signle_char+2
   880  009388  C041  F047         	movff	?a_xprint+5,?_dis_signle_char+3
   881  00938C  C03A  F000         	movff	?_xprint+5,btemp
   882  009390  C03B  F001         	movff	?_xprint+6,btemp+1
   883  009394  0100               	movlb	__Lparam shr (0+8)
   884  009396  5142               	movf	(?a_xprint+6)^(__Lparam& (0+65280)),w
   885  009398  2600               	addwf	btemp,f
   886  00939A  5143               	movf	(?a_xprint+7)^(__Lparam& (0+65280)),w
   887  00939C  2201               	addwfc	btemp+1,f
   888  00939E  C000  FFF6         	movff	btemp,tblptrl
   889  0093A2  C001  FFF7         	movff	btemp+1,tblptrh
   890  0093A6  0E0E               	movlw	(high __ramtop+-1)
   891  0093A8  64F7               	cpfsgt	tblptrh,c
   892  0093AA  D003               	bra	u307
   893  0093AC  0008               	tblrd		*
   894  0093AE  50F5               	movf	tablat,w,c
   895  0093B0  D005               	bra	u300
   896  0093B2                     u307:
   897  0093B2  CFF6 FFE9          	movff	tblptrl,fsr0l
   898  0093B6  CFF7 FFEA          	movff	tblptrh,fsr0h
   899  0093BA  50EF               	movf	indf0,w,c
   900  0093BC                     u300:
   901  0093BC  6F48               	movwf	(?_dis_signle_char+4)^(__Lparam& (0+65280
      +                          ))
   902  0093BE  5139               	movf	(?_xprint+4)^(__Lparam& (0+65280)),w
   903  0093C0  6F49               	movwf	(?_dis_signle_char+5)^(__Lparam& (0+65280
      +                          ))
   904  0093C2  DF26               	call	_dis_signle_char	;wreg free
   905                           ;lcd.c: 298: i++;
   906  0093C4  0100               	movlb	__Lparam shr (0+8)
   907  0093C6  4B42               	infsnz	(?a_xprint+6)^(__Lparam& (0+65280)),f
   908  0093C8  2B43               	incf	(?a_xprint+7)^(__Lparam& (0+65280)),f
   909                           ;lcd.c: 299: t_y=t_y+8;
   910  0093CA  0E08               	movlw	8
   911  0093CC  D062               	goto	L1
   912                           ;lcd.c: 301: }
   913  0093CE                     l67:
   914  0093CE  C03A  F000         	movff	?_xprint+5,btemp
   915  0093D2                     L4:
   916  0093D2  C03B  F001         	movff	?_xprint+6,btemp+1
   917  0093D6  0100               	movlb	__Lparam shr (0+8)
   918  0093D8  5142               	movf	(?a_xprint+6)^(__Lparam& (0+65280)),w
   919  0093DA  2600               	addwf	btemp,f
   920  0093DC  5143               	movf	(?a_xprint+7)^(__Lparam& (0+65280)),w
   921  0093DE  2201               	addwfc	btemp+1,f
   922  0093E0  C000  FFF6         	movff	btemp,tblptrl
   923  0093E4  C001  FFF7         	movff	btemp+1,tblptrh
   924  0093E8  0E0E               	movlw	(high __ramtop+-1)
   925  0093EA  64F7               	cpfsgt	tblptrh,c
   926  0093EC  D003               	bra	u317
   927  0093EE  0008               	tblrd		*
   928  0093F0  50F5               	movf	tablat,w,c
   929  0093F2  D005               	bra	u310
   930  0093F4                     u317:
   931  0093F4  CFF6 FFE9          	movff	tblptrl,fsr0l
   932  0093F8  CFF7 FFEA          	movff	tblptrh,fsr0h
   933  0093FC  50EF               	movf	indf0,w,c
   934  0093FE                     u310:
   935  0093FE  6E00               	movwf	btemp
   936  009400  0E7F               	movlw	127
   937  009402  5C00               	subwf	btemp,w
   938  009404  A0D8               	btfss	status,0,c
   939  009406  D049               	goto	l69
   940                           ;lcd.c: 303: {
   941  009408  C042  F000         	movff	?a_xprint+6,btemp
   942  00940C  C043  F001         	movff	?a_xprint+7,btemp+1
   943  009410  513A               	movf	(?_xprint+5)^(__Lparam& (0+65280)),w
   944  009412  2600               	addwf	btemp,f
   945  009414  513B               	movf	(?_xprint+6)^(__Lparam& (0+65280)),w
   946  009416  2201               	addwfc	btemp+1,f
   947  009418  C000  FFF6         	movff	btemp,tblptrl
   948  00941C  C001  FFF7         	movff	btemp+1,tblptrh
   949  009420  0E0E               	movlw	(high __ramtop+-1)
   950  009422  64F7               	cpfsgt	tblptrh,c
   951  009424  D003               	bra	u337
   952  009426  0008               	tblrd		*
   953  009428  50F5               	movf	tablat,w,c
   954  00942A  D005               	bra	u330
   955  00942C                     u337:
   956  00942C  CFF6 FFE9          	movff	tblptrl,fsr0l
   957  009430  CFF7 FFEA          	movff	tblptrh,fsr0h
   958  009434  50EF               	movf	indf0,w,c
   959  009436                     u330:
   960  009436  6EE1               	movwf	fsr1l,c
   961  009438  4B42               	infsnz	(?a_xprint+6)^(__Lparam& (0+65280)),f
   962  00943A  2B43               	incf	(?a_xprint+7)^(__Lparam& (0+65280)),f
   963                           ;lcd.c: 305: code2 = buf[i++];
   964  00943C  C042  F000         	movff	?a_xprint+6,btemp
   965  009440  C043  F001         	movff	?a_xprint+7,btemp+1
   966  009444  513A               	movf	(?_xprint+5)^(__Lparam& (0+65280)),w
   967  009446  2600               	addwf	btemp,f
   968  009448  513B               	movf	(?_xprint+6)^(__Lparam& (0+65280)),w
   969  00944A  2201               	addwfc	btemp+1,f
   970  00944C  C000  FFF6         	movff	btemp,tblptrl
   971  009450  C001  FFF7         	movff	btemp+1,tblptrh
   972  009454  0E0E               	movlw	(high __ramtop+-1)
   973  009456  64F7               	cpfsgt	tblptrh,c
   974  009458  D003               	bra	u347
   975  00945A  0008               	tblrd		*
   976  00945C  50F5               	movf	tablat,w,c
   977  00945E  D005               	bra	u340
   978  009460                     u347:
   979  009460  CFF6 FFE9          	movff	tblptrl,fsr0l
   980  009464  CFF7 FFEA          	movff	tblptrh,fsr0h
   981  009468  50EF               	movf	indf0,w,c
   982  00946A                     u340:
   983  00946A  6ED9               	movwf	fsr2l,c
   984  00946C  4B42               	infsnz	(?a_xprint+6)^(__Lparam& (0+65280)),f
   985  00946E  2B43               	incf	(?a_xprint+7)^(__Lparam& (0+65280)),f
   986                           ;lcd.c: 306: dis_double_word(t_x,t_y,code1,code2
      +                          ,flag);
   987  009470  C03E  F044         	movff	?a_xprint+2,?_dis_double_word
   988  009474  C03F  F045         	movff	?a_xprint+3,?_dis_double_word+1
   989  009478  C040  F046         	movff	?a_xprint+4,?_dis_double_word+2
   990  00947C  C041  F047         	movff	?a_xprint+5,?_dis_double_word+3
   991  009480  50E1               	movf	fsr1l,w,c
   992  009482  6F48               	movwf	(?_dis_double_word+4)^(__Lparam& (0+65280
      +                          ))
   993  009484  50D9               	movf	fsr2l,w,c
   994  009486  6F49               	movwf	(?_dis_double_word+5)^(__Lparam& (0+65280
      +                          ))
   995  009488  5139               	movf	(?_xprint+4)^(__Lparam& (0+65280)),w
   996  00948A  6F4A               	movwf	(?_dis_double_word+6)^(__Lparam& (0+65280
      +                          ))
   997  00948C  DE3C               	call	_dis_double_word	;wreg free
   998                           ;lcd.c: 307: t_y=t_y+16;
   999  00948E  0E10               	movlw	16
  1000  009490  0100               	movlb	__Lparam shr (0+8)
  1001  009492                     L1:
  1002  009492  2740               	addwf	(?a_xprint+4)^(__Lparam& (0+65280)),f
  1003  009494  0E00               	movlw	0
  1004  009496  2341               	addwfc	(?a_xprint+5)^(__Lparam& (0+65280)),f
  1005                           ;lcd.c: 309: }
  1006  009498  D72C               	goto	l66
  1007  00949A                     l69:
  1008                           ;lcd.c: 311: {
  1009  00949A  0100               	movlb	__Lparam shr (0+8)
  1010  00949C  4B42               	infsnz	(?a_xprint+6)^(__Lparam& (0+65280)),f
  1011  00949E  2B43               	incf	(?a_xprint+7)^(__Lparam& (0+65280)),f
  1012  0094A0  D728               	goto	l66
  1013  0094A2                     u350:
  1014                           ;lcd.c: 320: return 0;
  1015  0094A2  6A00               	clrf	btemp
  1016  0094A4  6A01               	clrf	btemp+1
  1017  0094A6  0012               	return	
  1018                           ;lcd.c: 321: }
  1019  0094A8  0029               	dw	?_xprintf
  1020  0094AA                     _xprintf:
  1021  000000                     
  1022                           ;lcd.c: 327: va_list arg_ptr;
  1023  0094AA  0100               	movlb	__Lparam shr (0+8)
  1024  0094AC  0E94               	movlw	low _bufb
  1025  0094AE  6F35               	movwf	?_memset^(__Lparam& (0+65280))
  1026  0094B0  0E0E               	movlw	high _bufb
  1027  0094B2  6F36               	movwf	(?_memset+1)^(__Lparam& (0+65280))
  1028  0094B4  6B37               	clrf	(?_memset+2)^(__Lparam& (0+65280))
  1029  0094B6  6B38               	clrf	(?_memset+3)^(__Lparam& (0+65280))
  1030  0094B8  0E64               	movlw	100
  1031  0094BA  6F39               	movwf	(?_memset+4)^(__Lparam& (0+65280))
  1032  0094BC  6B3A               	clrf	(?_memset+5)^(__Lparam& (0+65280))
  1033  0094BE  EC9A  F051         	call	_memset	;wreg free
  1034                           ;lcd.c: 331: *arg_ptr = __va_start();
  1035  0094C2  C029  F029         	movff	?_xprintf,?a_xprintf
  1036  0094C6  C02A  F02A         	movff	?_xprintf+1,?a_xprintf+1
  1037                           ;lcd.c: 333: sprintf(bufb, fmt, arg_ptr);
  1038  0094CA  0100               	movlb	__Lparam shr (0+8)
  1039  0094CC  0E94               	movlw	low _bufb
  1040  0094CE  6F37               	movwf	(?_sprintf+2)^(__Lparam& (0+65280))
  1041  0094D0  0E0E               	movlw	high _bufb
  1042  0094D2  6F38               	movwf	(?_sprintf+3)^(__Lparam& (0+65280))
  1043  0094D4  C030  F039         	movff	?_xprintf+7,?_sprintf+4
  1044  0094D8  C031  F03A         	movff	?_xprintf+8,?_sprintf+5
  1045  0094DC  0E29               	movlw	low ?a_xprintf
  1046  0094DE  6F2B               	movwf	(?a_xprintf+2)& (0+255),b
  1047  0094E0  0E00               	movlw	high ?a_xprintf
  1048  0094E2  6F2C               	movwf	(?a_xprintf+3)& (0+255),b
  1049  0094E4  0E2B               	movlw	low (?a_xprintf+2)
  1050  0094E6  CFE8 F035          	movff	wreg,?_sprintf
  1051  0094EA  0E00               	movlw	high (?a_xprintf+2)
  1052  0094EC  CFE8 F036          	movff	wreg,?_sprintf+1
  1053  0094F0  ECA6  F04A         	call	_sprintf	;wreg free
  1054                           ;lcd.c: 335: ;
  1055  0094F4  C02B  F035         	movff	?_xprintf+2,?_xprint
  1056  0094F8  C02C  F036         	movff	?_xprintf+3,?_xprint+1
  1057  0094FC  C02D  F037         	movff	?_xprintf+4,?_xprint+2
  1058  009500  C02E  F038         	movff	?_xprintf+5,?_xprint+3
  1059  009504  0E94               	movlw	low _bufb
  1060  009506  6E00               	movwf	btemp
  1061  009508  0E0E               	movlw	high _bufb
  1062  00950A  6E01               	movwf	btemp+1
  1063  00950C  5000               	movf	btemp,w
  1064  00950E  0100               	movlb	__Lparam shr (0+8)
  1065  009510  6F39               	movwf	(?_xprint+4)^(__Lparam& (0+65280))
  1066  009512  C02F  F000         	movff	?_xprintf+6,btemp
  1067  009516  6A01               	clrf	btemp+1
  1068  009518  C000  F03A         	movff	btemp,?_xprint+5
  1069  00951C  C001  F03B         	movff	btemp+1,?_xprint+6
  1070  009520  DED3               	call	_xprint	;wreg free
  1071                           ;lcd.c: 339: return 0;
  1072  009522  6A00               	clrf	btemp
  1073  009524  6A01               	clrf	btemp+1
  1074  009526  0012               	return	
  1075                           
  1076                           	psect	bigbss
  1077  000E93                     F1693:
  1078  000E93                     	ds	1
  1079  000000                     
  1080  000000                     
  1081  000000                     
  1082  000000                     
  1083  000000                     
  1084  000000                     
  1085  000000                     
  1086  000000                     
  1087  000000                     
  1088  000000                     
  1089  000000                     
  1090  000000                     
  1091  000000                     
  1092  000000                     
  1093  000000                     
  1094  000000                     
  1095  000000                     
  1096  000000                     
  1097  000000                     
  1098  000000                     
  1099  000000                     
  1100  000000                     
  1101  000000                     
  1102  000000                     
  1103  000000                     
  1104  000000                     
  1105  000000                     
  1106  000000                     
  1107  000000                     
  1108  000000                     
  1109  000000                     
  1110  000000                     
  1111  000000                     
  1112  000000                     
  1113  000000                     
  1114  000000                     
  1115  000000                     
  1116  000000                     
  1117  000000                     
  1118  000000                     
  1119  000000                     
  1120  000000                     
  1121  000000                     
  1122  000000                     
  1123  000000                     
  1124  000000                     
  1125  000000                     
  1126  000000                     
  1127  000000                     
  1128  000000                     
  1129  000000                     
  1130  000000                     
  1131  000000                     
  1132  000000                     
  1133  000000                     
  1134  000000                     
  1135  000000                     
  1136  000000                     
  1137  000000                     
  1138  000000                     
  1139  000000                     
  1140  000000                     
  1141  000000                     
  1142  000000                     
  1143  000000                     
  1144  000000                     
  1145  000000                     
  1146  000000                     
  1147  000000                     
  1148  000000                     
  1149  000000                     
  1150  000000                     
  1151  000000                     
  1152  000000                     
  1153  000000                     
  1154  000000                     
  1155  000000                     
  1156  000000                     
  1157  000000                     
  1158  000000                     
  1159  000000                     
  1160  000000                     
  1161  000000                     
  1162  000000                     
  1163  000000                     
  1164  000000                     
  1165  000000                     
  1166  000000                     
  1167  000000                     
  1168  000000                     
  1169  000000                     
  1170  000000                     
  1171  000000                     
  1172  000000                     
  1173  000000                     
  1174  000000                     
  1175  000000                     
  1176  000000                     
  1177  000000                     
  1178  000000                     
  1179  000000                     
  1180  000000                     
  1181  000000                     
  1182  000000                     
  1183  000000                     
  1184  000000                     
  1185  000000                     
  1186  000000                     
  1187  000000                     
  1188  000000                     
  1189  000000                     
  1190  000000                     
  1191  000000                     
  1192  000000                     
  1193  000000                     
  1194  000000                     
  1195  000000                     
  1196  000000                     
  1197  000000                     
  1198  000000                     
  1199  000000                     
  1200  000000                     
  1201  000000                     
  1202  000000                     
  1203  000000                     
  1204  000000                     
  1205  000000                     
  1206  000000                     
  1207  000000                     
  1208  000000                     
  1209  000000                     
  1210  000000                     
  1211  000000                     
  1212  000000                     
  1213  000000                     
  1214  000000                     
  1215  000000                     
  1216  000000                     
  1217  000000                     
  1218  000000                     
  1219  000000                     
  1220  000000                     
  1221  000000                     
  1222  000000                     
  1223  000000                     
  1224  000000                     
  1225  000000                     
  1226  000000                     
  1227  000000                     
  1228  000000                     
  1229  000000                     
  1230  000000                     
  1231  000000                     
  1232  000000                     
  1233  000000                     
  1234  000000                     
  1235  000000                     
  1236  000E93                     _bufb:
  1237  000E93                     	ds	100
  1238                           
  1239                           	psect	temp
  1240  000000                     btemp:
  1241  000000                     	ds	4
  1242                           tblptrh	equ	0xFF7
  1243                           tblptrl	equ	0xFF6
  1244                           tablat	equ	0xFF5
  1245                           prodh	equ	0xFF4
  1246                           prodl	equ	0xFF3
  1247                           indf0	equ	0xFEF
  1248                           fsr0h	equ	0xFEA
  1249                           fsr0l	equ	0xFE9
  1250                           wreg	equ	0xFE8
  1251                           fsr1l	equ	0xFE1
  1252                           fsr2l	equ	0xFD9
  1253                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V8.35PL3
Symbol Table                                           Thu Jan  2 10:12:16 2014

                    l8 8F78                     l30 90A2  
                   l23 902C                     l24 9030  
                   l17 9006                     l50 91C2  
                   l42 9108                     l34 90CE  
                   l26 9070                     l51 91DE  
                   l43 9160                     l27 909E  
                   l60 92B6                     l52 91FC  
                   l61 92BC                     l53 9204  
                   l45 9158                     l37 90D8  
                   l55 9212                     l47 916A  
                   l66 92F2                     l58 927C  
                   l67 93CE                     l59 9298  
                   l69 949A                     u40 9054  
                   u50 906C                     u47 904A  
                   u57 9062                    u300 93BC  
                  u310 93FE                    u225 9288  
                  u330 9436                    u250 933A  
                  u307 93B2                    u340 946A  
                  u317 93F4                    u350 94A2  
                  u270 9372                    u337 942C  
                  u257 9330                    u185 91CE  
                  u355 9306                    u347 9460  
                  u277 9368      ?a_dis_double_word 004B  
      _lcd_page_config 8FC0                    _dly 8F72  
                  wreg 000FE8                   F1693 0E93  
                 f7453 002D                   _bufb 0E94  
                 _fxdz 21F5                   fsr0h 000FEA  
                 indf0 000FEF                   fsr0l 000FE9  
                 fsr1l 000FE1                   fsr2l 000FD9  
                 btemp 0000                   _ziku 19FD  
                 prodh 000FF4                   prodl 000FF3  
             _init_lcd 90EE              ?a_xprintf 0029  
             clear_big 0018                ?_memset 0035  
              ?_strlen 0044                ?_xprint 0035  
            _lcd_clear 90C8        _dis_signle_char 9210  
           used_btemp0 0001             used_btemp1 0001  
           used_btemp2 0001             used_btemp3 0001  
       _lcd_col_config 8F90       ?_dis_signle_char 0044  
   ?a_fill_bit_picture 0029                  tablat 000FF5  
                status 000FD8                __Lparam 0029  
     _write_cmd_to_lcd 8FE6                __ramtop 0F00  
           _ascii_8_16 140D               ?a_xprint 003C  
              _sprintf 954C               ?_sprintf 0035  
              _xprintf 94AA               ?_xprintf 0029  
     _fill_bit_picture 8FF4        _dis_double_word 9106  
     ?_dis_double_word 0044                 _memset A334  
               _strlen A2A8                 _xprint 92C8  
               tblptrh 000FF7                 tblptrl 000FF6  
    _write_data_to_lcd 8FD8           _lcd_pin_init 8F62  
       _lcd_row_config 8FA8  
